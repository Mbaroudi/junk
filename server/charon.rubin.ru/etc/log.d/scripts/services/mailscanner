##########################################################################
# $Id: mailscanner,v 1.7 2005/02/24 17:08:04 kirk Exp $
##########################################################################

########################################################
# This was written and is maintained by:
#    Mike Tremaine <mgt \@\ stellarcore.net>
#
# Sophos Support and other improvments by Mark W. Nienberg
# MailScan_Spam_Act contributed by Kev Green
#
# Some more clean up rules based on extensive use of some MailScanner
# settings and F-Prot and ClamAV as dual scanners by Hugo van der Kooij
#
########################################################

my $Detail = $ENV{'LOGWATCH_DETAIL_LEVEL'} || 0;

#Inits
my $MailScan_bytes = 0;
my $MailScan_Content = 0;
my $MailScan_Delivered = 0;
my $MailScan_Other = 0;
my $MailScan_Received = 0;
my $MailScan_Spam = 0;
my $MailScan_Unscanned = 0;
my $MailScan_Virus = 0;
my $SA_timeout = 0;

while (defined($ThisLine = <STDIN>)) {
   #($QueueID) = ($ThisLine =~ m/^([a-zA-Z0-9]+): / );
   $ThisLine =~ s/^[a-zA-Z0-9]+: //;
   if ( ( $ThisLine =~ m/^Saved infected/ ) or
         ( $ThisLine =~ m/^Expanding TNEF archive/ ) or
         ( $ThisLine =~ m/^Warned about/ ) or
         ( $ThisLine =~ m/^Sender Warnings:/ ) or
         ( $ThisLine =~ m/X-Spam/ ) or
         ( $ThisLine =~ m/Using locktype = flock/ ) or
         ( $ThisLine =~ m/New Batch: Found/ ) or
         ( $ThisLine =~ m/Attempting to disinfect/ ) or
         ( $ThisLine =~ m/Rescan found/ ) or
         ( $ThisLine =~ m/Virus Re-scanning:/ ) or
         ( $ThisLine =~ m/Content Checks: Fixed awkward MIME boundary for Cyrus IMAP/ ) or
         ( $ThisLine =~ m/Delete bayes lockfile/ ) or
         ( $ThisLine =~ m/MailScanner E-Mail Virus Scanner version/ ) or
         ( $ThisLine =~ m/MailScanner child dying of old age/ ) or
         ( $ThisLine =~ m/MailScanner child caught a SIGHUP/ ) or
         ( $ThisLine =~ m/Virus and Content Scanning/ ) or
         ( $ThisLine =~ m/Virus Scanning: [\w]+ found/ ) or
         ( $ThisLine =~ m/Virus Scanning: ClamAV Module found [\d]+ infections/ ) or
         ( $ThisLine =~ m/^ClamAV virus database has been updated/ ) or
         ( $ThisLine =~ m/^ClamAV update of/ ) or
         ( $ThisLine =~ m/Message .+ is spam, Spam/ ) or
         ( $ThisLine =~ m/Saved entire message to/ ) or
         ( $ThisLine =~ m/Spam Checks: Starting/ ) or
         ( $ThisLine =~ m/SophosSAVI .+ recognizing [0-9]+ viruses/ ) or
         ( $ThisLine =~ m/SophosSAVI using [0-9]+ IDE files/ ) or
         ( $ThisLine =~ m/Sophos SAVI library has been updated/ ) or
         ( $ThisLine =~ m/Sophos.*update.* detected, resetting SAVI/ ) or
         ( $ThisLine =~ m/RBL checks: .+ found in RFC-IGNORANT-POSTMASTER/ ) or
         ( $ThisLine =~ m/Message .+ from .+ to .+ is spam/ ) or
         ( $ThisLine =~ m/F-Prot found/ ) or
         ( $ThisLine =~ m/SpamAssassin Bayes database rebuild starting|preparing|completed/ ) or
         ( $ThisLine =~ m/Rebuilding SpamAssassin Bayes database/ ) or
         ( $ThisLine =~ m/Skipping SpamAssassin while waiting for Bayes/ ) or
         ( $ThisLine =~ m/Bayes database rebuild is due/ ) or
         ( $ThisLine =~ m/Content Checks: Detected and will convert|disarm HTML/ ) or
         ( $ThisLine =~ m/Content Checks: Detected and have disarmed HTML message/ ) or
         ( $ThisLine =~ m/Read [0-9]+ hostnames from the phishing whitelist/ ) or
         ( $ThisLine =~ m/completed at [0-9]+ bytes per second/ ) or
         ( $ThisLine =~ m/Message .+ from .+ to .+ is/ ) or 
         ( $ThisLine =~ m/^[A-F0-9]+\.[A-F0-9]{5} to/ ) or #for postfix Requeue:
         ( $ThisLine =~ m/^calling custom .* function/ ) or
         ( $ThisLine =~ m/^Initialising database connection/ ) or
         ( $ThisLine =~ m/^Finished initialising database connection/ ) or
         ( $ThisLine =~ m/^Disconnected from the database/ ) or
         ( $ThisLine =~ m/^<A> tag found in message/ ) or
         ( $ThisLine =~ m/^Viruses marked as silent:/ ) 
   ) {
      # We don't care about these
   } elsif ( $ThisLine =~ m/New Batch: Scanning ([0-9]+) messages, ([0-9]+) bytes/i) {
      $MailScan_Received = $MailScan_Received + $1;
      $MailScan_bytes = $MailScan_bytes + $2;
   } elsif ( $ThisLine =~ m/New Batch: Forwarding ([0-9]+) unscanned messages, ([0-9]+) bytes/i) {
      $MailScan_Received = $MailScan_Received + $1;
      $MailScan_Unscanned = $MailScan_Unscanned + $1;
      $MailScan_bytes = $MailScan_bytes + $2;
   } elsif ( $ThisLine =~ m/Delivered ([0-9]+)( cleaned)? messages/) {
      $MailScan_Delivered = $MailScan_Delivered + $1;
   } elsif ( $ThisLine =~ m/Spam Checks: Found ([0-9]+) spam messages/) {
      $MailScan_Spam = $MailScan_Spam + $1;
   } elsif ( $ThisLine =~ m/Virus Scanning: Found ([0-9]+) viruses/) {
      $MailScan_Virus = $MailScan_Virus + $1;
   } elsif ( $ThisLine =~ m/infected message .+ came from (.*)/i) {
      $MailScan_VirualHost = $MailScan_VirualHost + 1;
      $Hostlist{$1}++;
   } elsif ( $ThisLine =~ m/Content Checks: Found ([0-9]+) problems/) {
      $MailScan_Content = $MailScan_Content + $1;
   } elsif ( $ThisLine =~ m/Other Checks: Found ([0-9]+) problems/) {
      $MailScan_Other = $MailScan_Other + $1;
   } elsif ($ThisLine =~ m/^\/var\/spool\/MailScanner\/incoming\/.+: ([\w\_\-\.\/]+) FOUND/i) {
      $VirusType_ClamAv{$1}++;
      $MailScan_Virus_ClamAv++;
   } elsif ($ThisLine =~ m/ClamAVModule::INFECTED:: (.+)::/) {
      $VirusType_ClamAVModule{$1}++;
      $MailScan_Virus_ClamAVModule++;
   } elsif ($ThisLine =~ m/^\/var\/spool\/MailScanner\/incoming\/.+ Infection: (.+)/i) {
      $VirusType_Fprot{$1}++;
      $MailScan_Virus_Fprot++;
   } elsif ($ThisLine =~ m/^\/var\/spool\/MailScanner\/incoming\/.+ could be/i) {
      $MailScan_Virus_Fprot++;
   } elsif ($ThisLine =~ m/Found the (.+) virus !!!/) {
      $VirusType_McAfee{$1}++;
      $MailScan_Virus_McAfee++;
   } elsif ($ThisLine =~ m/>>> Virus \'(.+)\' found/) {
      $VirusType_Sophos{$1}++;
      $MailScan_Virus_Sophos++;
   } elsif ($ThisLine =~ m/SophosSAVI::INFECTED:: (.+)::/) {
      $VirusType_SophosSavi{$1}++;
      $MailScan_Virus_SophosSavi++;
   } elsif ($ThisLine =~ m/Content Checks: Detected (.+) in [\w]+/i) {
      $ContentType{$1}++;
   } elsif ($ThisLine =~ m/Filename Checks: Allowing (.+)/i) {
      if ($ThisLine =~ m/Allowing.*msg\-[0-9]*\-[0-9]*\.[txt|dat|html]/) {
      # we don't care about these, regular messages
      } else {
      #filter sendmail tag and "(no rule matched)"
      my $temp_fc = $1;
      $temp_fc =~ s/[a-z0-9]{14}\s//i;
      $temp_fc =~ s/\(no rule matched\)//i;
      $FilenameAllow{$temp_fc}++;
      $MailScan_FileAllow++;
      }
   } elsif ($ThisLine =~ m/Filename Checks: (.+)/i) {
      #filter sendmail tag
      my $temp_fc = lc($1);
      $temp_fc =~ s/\([a-z0-9]{14}\s/\(/i;
      $temp_fc =~ s/\s{10,}/ -space- /;
      $FilenameType{$temp_fc}++;
   } elsif ($ThisLine =~ m/(Password\-protected archive \(.+\)) in \w+/i) {
      $MailScan_Other = $MailScan_Other + 1;
      $FilenameType{$1}++;
   } elsif ($ThisLine =~ /Spam Actions: .+ actions are (.*)/) {
      $MailScan_Spam_Act{$1}++;
   } elsif ($ThisLine =~ /SpamAssassin timed out and was killed/) {
      $SA_timeout++;
   } elsif ( $ThisLine =~ m/Message .+ from (.+ \(.+\)) is whitelisted/ ) {
      $MailScan_Whitelisted++;
      $Whitelisted_Host{$1}++;
   } elsif ( $ThisLine =~ m/Message .+ from (.+ \(.+\)) to .+ is spam \(blacklisted\)/ ) {
      $MailScan_Blacklisted++;
      $Blacklisted_Host{$1}++;
   } elsif ($ThisLine =~ m/^Found phishing fraud from (.+) claiming to be (.+) in/) {
      $MailScan_Phishing++;
      $PhishingSource{$1}++;
      $PhishingSourceDest{"$1 claiming to be $2"}++;
   } elsif ($ThisLine =~ m/^Found ip-based phishing fraud from (.+) in/) {
      $MailScan_Phishing++;
      $PhishingSource{$1}++;
   } elsif ($ThisLine =~ m/^HTML-Form tag found in message .+ from (.+)/) {
      $MailScan_FormTag++;
      $FormTagSource{$1}++;
   } elsif ($ThisLine =~ m/^HTML-Script tag found in message .+ from (.+)/) {
      $MailScan_ScriptTag++;
      $ScriptTagSource{$1}++;
   } elsif ($ThisLine =~ m/^HTML-IFrame tag found in message .+ from (.+)/) {
      $MailScan_IframeTag++;
      $IframeTagSource{$1}++;
   } else {
      chomp($ThisLine);
      # Report any unmatched entries...
      $OtherList{$ThisLine}++; 
   }
}

if ($MailScan_Received > 0) {
   print "\nMailScanner Status:";
   print "\n\t" . $MailScan_Received . ' messages Scanned by MailScanner';
   my $size_total = 1 ;
   if ($MailScan_bytes < 1024) {
       $size_total = $MailScan_bytes . ' Total Bytes';
   } elsif ($MailScan_bytes < 1048576) {
       $size_total = sprintf("%.1f", ($MailScan_bytes / 1024)) . ' Total KB';
   } else {
       $size_total = sprintf("%.1f", ($MailScan_bytes / 1048576)) . ' Total MB';
   }
   print "\n\t" . $size_total ;
}

if ($MailScan_Spam > 0) {
   print "\n\t" . $MailScan_Spam . ' Spam messages detected by MailScanner';
}

if (keys %MailScan_Spam_Act) {
   foreach $ThisOne (sort keys %MailScan_Spam_Act) {
      if ($MailScan_Spam_Act{$ThisOne} > 0) {
          print "\n\t\t" . $MailScan_Spam_Act{$ThisOne} . ' Spam messages with action(s) ' .$ThisOne ;
      }
   }
}

if ($MailScan_Unscanned > 0) {
   print "\n\t" . $MailScan_Unscanned . ' Messages forwarded unscanned by MailScanner';
}

if ($MailScan_Virus > 0) {
   print "\n\t" . $MailScan_Virus . ' Viruses found by MailScanner';
}

if ($MailScan_Other > 0) {
   print "\n\t" . $MailScan_Other . ' Banned attachments found by MailScanner';
}

if ($MailScan_Content > 0) {
   print "\n\t" . $MailScan_Content . ' Content Problems found by MailScanner';
}

if ($MailScan_Delivered > 0) {
   print "\n\t" . $MailScan_Delivered . " Messages delivered by MailScanner\n";
}

if ($SA_timeout > 0) {
   print "\n\t" . $SA_timeout . " SpamAssassin timeout(s)\n";
}

if (keys %VirusType_ClamAv) {
   print "\nClamAV Virus Report: (Total Seen = $MailScan_Virus_ClamAv)\n";
   foreach $ThisOne (sort keys %VirusType_ClamAv) {
      print '    ' . $ThisOne . ': ' . $VirusType_ClamAv{$ThisOne} . " Times(s)\n";
   }
}

if (keys %VirusType_ClamAVModule) {
   print "\nClamAVModule Virus Report: (Total Seen = $MailScan_Virus_ClamAVModule)\n";
   foreach $ThisOne (sort keys %VirusType_ClamAVModule) {
   print '    ' . $ThisOne . ': ' . $VirusType_ClamAVModule{$ThisOne} . " Times(s)\n";
   }
}

if (keys %VirusType_Fprot) {
   print "\nF-Prot Virus Report: (Total Seen = $MailScan_Virus_Fprot)\n";
   foreach $ThisOne (sort keys %VirusType_Fprot) {
      print '    ' . $ThisOne . ': ' . $VirusType_Fprot{$ThisOne} . " Times(s)\n";
   }
}

if (keys %VirusType_McAfee) {
   print "\nMcAfee Virus Report: (Total Seen = $MailScan_Virus_McAfee)\n";
   foreach $ThisOne (sort keys %VirusType_McAfee) {
      print '    ' . $ThisOne . ': ' . $VirusType_McAfee{$ThisOne} . " Times(s)\n";
   }
}

if (keys %VirusType_Sophos) {
   print "\nSophos Virus Report: (Total Seen = $MailScan_Virus_Sophos)\n";
   foreach $ThisOne (sort keys %VirusType_Sophos) {
      print '    ' . $ThisOne . ': ' . $VirusType_Sophos{$ThisOne} . " Times(s)\n";
   }
}

if (keys %VirusType_SophosSavi) {
   print "\nSophosSavi Virus Report: (Total Seen = $MailScan_Virus_SophosSavi)\n";
   foreach $ThisOne (sort keys %VirusType_SophosSavi) {
   print '    ' . $ThisOne . ': ' . $VirusType_SophosSavi{$ThisOne} . " Times(s)\n";
   }
}

if (keys %Hostlist) {
   print "\nVirus Sender Report: (Total Seen = $MailScan_VirualHost)\n";
   foreach $ThisOne (sort keys %Hostlist) {
      print '    ' . $ThisOne . ': ' . $Hostlist{$ThisOne} . " Times(s)\n";
   }
}

if (keys %Whitelisted_Host) {
   print "\nSpam Whitelisted Host Report: (Total Seen = $MailScan_Whitelisted)\n";
   foreach $ThisOne (sort keys %Whitelisted_Host) {
   print '    ' . $ThisOne . ': ' . $Whitelisted_Host{$ThisOne} . " Times(s)\n";
   }
}


if (keys %Blacklisted_Host) {
   print "\nSpam Blacklisted Host Report: (Total Seen = $MailScan_Blacklisted)\n";
   foreach $ThisOne (sort keys %Blacklisted_Host) {
      print '    ' . $ThisOne . ': ' . $Blacklisted_Host{$ThisOne} . " Times(s)\n";
   }
}

if (keys %ContentType) {
   print "\nContent Report: (Total Seen = $MailScan_Content)\n";
   foreach $ThisOne (sort keys %ContentType) {
      print '    ' . $ThisOne . ': ' . $ContentType{$ThisOne} . " Times(s)\n";
   }
}

if (keys %FilenameAllow) {
   print "\nAllowed Filename Report: (Total Seen = $MailScan_FileAllow)\n";
   if ($Detail >= 10) {
      foreach $ThisOne (sort keys %FilenameAllow) {
         print '    ' . $ThisOne . ': ' . $FilenameAllow{$ThisOne} . " Times(s)\n";
      }
   } else {
      print '    ' . "Details Suppressed at level $Detail. Level 10 required.\n";
   }
}

if (keys %FilenameType) {
   print "\nBanned Filename Report: (Total Seen = $MailScan_Other)\n";
   foreach $ThisOne (sort keys %FilenameType) {
      print '    ' . $ThisOne . ': ' . $FilenameType{$ThisOne} . " Times(s)\n";
   }
}

if (keys %PhishingSource) {
   print "\nPhishing Report: (Total Seen = $MailScan_Phishing)\n";
   foreach $ThisOne (sort keys %PhishingSource) {
      print '    ' . $ThisOne . ': ' . $PhishingSource{$ThisOne} . " Times(s)\n";
   };
   print "\n  Detail:\n";
   foreach $ThisOne (sort keys %PhishingSourceDest) {
      print '    ' . $ThisOne . ': ' . $PhishingSourceDest{$ThisOne} . " Times(s)\n";
   }
}

if (keys %FormTagSource) {
   print "\nHTML <FORM> tag report: (Total Seen = $MailScan_FormTag)\n";
   foreach $ThisOne (sort keys %FormTagSource) {
      print '    ' . $ThisOne . ': ' . $FormTagSource{$ThisOne} . " Times(s)\n";
   }
}

if (keys %ScriptTagSource) {
   print "\nHTML <SCRIPT> tag report: (Total Seen = $MailScan_ScriptTag)\n";
   foreach $ThisOne (sort keys %ScriptTagSource) {
      print '    ' . $ThisOne . ': ' . $ScriptTagSource{$ThisOne} . " Times(s)\n";
   }
}

if (keys %IframeTagSource) {
   print "\nHTML <IFRAME> tag report: (Total Seen = $MailScan_IframeTag)\n";
   foreach $ThisOne (sort keys %IframeTagSource) {
      print '    ' . $ThisOne . ': ' . $IframeTagSource{$ThisOne} . " Times(s)\n";
   }
}

if (keys %OtherList) {
   print "\n**Unmatched Entries**\n";
   foreach $line (sort {$OtherList{$b}<=>$OtherList{$a} } keys %OtherList) {
      print "   $line: $OtherList{$line} Time(s)\n";
   }
}

exit(0);

# vi: shiftwidth=3 tabstop=3 syntax=perl et
