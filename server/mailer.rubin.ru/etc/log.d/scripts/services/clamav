##################################################################
#
# clamav script ver. 0.32 for Logwatch.
#
# Written by S. Schimkat <www.schimkat.dk>.
#
# Find latest version here: www.schimkat.dk/clamav
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
##################################################################
$Detail = $ENV{'LOGWATCH_DETAIL_LEVEL'};
my $IgnoreUnmatched = $ENV{'clamav_ignoreunmatched'} || 0;

while (defined($ThisLine = <STDIN>)) {
   if ( ( $ThisLine =~ /^Reading databases from/ ) or  
        ( $ThisLine =~ /^Socket file/ ) or
        ( $ThisLine =~ /^Pid file/ ) or
        ( $ThisLine =~ /^Log file/ ) or
        ( $ThisLine =~ /^Protecting against/ ) or
        ( $ThisLine =~ /^Unix socket file/ ) or
        ( $ThisLine =~ /^Setting connection queue length to/ ) or
        ( $ThisLine =~ /^Maximal number of threads:/ ) or
        ( $ThisLine =~ /^Archive/ ) or
        ( $ThisLine =~ /^RAR support/ ) or
        ( $ThisLine =~ /^Mail files support/ ) or
        ( $ThisLine =~ /^Self checking every/ ) or
        ( $ThisLine =~ /^Timeout set to/ ) or
        ( $ThisLine =~ /^Running as user \w+ \(UID \d+, GID \d+\)/ ) or 
        ( $ThisLine =~ /^Exiting \(clean\)/ ) or
        ( $ThisLine =~ /^OLE2 support enabled./ ) or
        ( $ThisLine =~ /^No stats for Database check/ ) or
        ( $ThisLine =~ /^Bound to address/ )) {
      # We do not care about these.
   } elsif (($Check) = ($ThisLine =~ /^SelfCheck: (.*?)\.?\s?\n/i)) {
      $SelfCheck{$Check}++;
   } elsif (($Virus) = ($ThisLine =~ /^.+?: (.*?) FOUND/i )) {
      $VirusList{$Virus}++;
   } elsif (($Viruses) = ($ThisLine =~ /^Database correctly reloaded \((\d+) viruses\)/i )) {
      $DatabaseReloads{$Viruses}++;
   } elsif (($ThisLine =~ /Stopped at/)) {
      $DaemonStop++;
   } elsif (($ThisLine =~ /Daemon started/)) {
      $DaemonStart++;
   } else {
      # Comment the following line if using verbose logging.
      # Note that doing that will result in not displaying the extra log.
      push @OtherList,$ThisLine;
   }
}

if (($DaemonStop) and ($Detail >= 5)) {
   print "\nDaemon stopped: ". $DaemonStop." Time(s)\n";
}

if (($DaemonStart) and ($Detail >= 5)) {
   print "\nDaemon started: ". $DaemonStart." Time(s)\n";
}

if (keys %VirusList) {
   print "\nViruses detected:\n";
   foreach $Virus (sort {$a cmp $b} keys %VirusList) {
      print '   ' . $Virus . ": ". $VirusList{$Virus} . " Time(s)\n";
   }
}

if (keys %SelfCheck) {
   print "\nDaemon check list:\n";
   foreach $Check (sort {$a cmp $b} keys %SelfCheck) {
      print '   ' . $Check . ": ". $SelfCheck{$Check} . " Time(s)\n";
   }
}

if (keys %DatabaseReloads) {
   print "\nVirus database reloads:\n";
   foreach $VirusCount (sort {$a cmp $b} keys %DatabaseReloads) {
      print '   Now protecting against ' . $VirusCount . ' viruses: ' . $DatabaseReloads{$VirusCount} . " Time(s)\n";
   }
}

if (($#OtherList >= 0) and (not $IgnoreUnmatched)){
   print "\n**Unmatched Entries**\n";
   print @OtherList;
}

exit(0);
