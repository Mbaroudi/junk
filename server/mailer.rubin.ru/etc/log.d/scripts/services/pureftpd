##########################################################################
# $Id: pureftpd,v 1.6 2005/02/24 17:08:05 kirk Exp $
##########################################################################
# $Log: pureftpd,v $
# Revision 1.6  2005/02/24 17:08:05  kirk
# Applying consolidated patches from Mike Tremaine
#
# Revision 1.5  2005/02/16 00:43:28  mgt
# Added #vi tag to everything, updated ignore.conf with comments, added emerge and netopia to the tree from Laurent -mgt
#
# Revision 1.4  2004/07/29 19:33:29  mgt
# Chmod and removed perl call -mgt
#
# Revision 1.3  2004/07/10 01:54:35  mgt
# sync with kirk -mgt
#
# Revision 1.3  2004/02/03 02:45:26  kirk
# Tons of patches, and new 'oidentd' and 'shaperd' filters from
# Pawe? Go?aszewski" <blues@ds.pg.gda.pl>
#
##########################################################################

##########################################################################
# Written & Maintained by Chris Smith (csmith@squiz.net)
##########################################################################

$Detail = $ENV{'LOGWATCH_DETAIL_LEVEL'};
$ShowLogins  = $ENV{'show_logins'};
$ShowLogouts = $ENV{'show_logouts'};
$ShowDataTransfers = $ENV{'show_data_transfers'};
$ShowNewConnections = $ENV{'show_new_connections'};

$PureShutdown = 0;

while (defined($ThisLine = <STDIN>)) {
   if (
      ( $ThisLine =~ /last message repeated/ ) or
      ( $ThisLine =~ /Timeout/) or
      ( $ThisLine =~ /Can't change directory/) or
      ( $ThisLine =~ /pure-ftpd startup( |) succeeded/)
   ) {
      #We don't care about these
   } elsif (($IP,$j) = ($ThisLine =~ /\@(.*?)\)(.*?)new connection/i )) {
      $NewConnections{$IP}++;
   } elsif (($IP,$j) = ($ThisLine =~ /\@(.*?)\)(.*?)logout/i )) {
      $Logouts{$IP}++;
   } elsif (($IP,$j) = ($ThisLine =~ /\@(.*?)\)(.*?)unable to set up secure anonymous ftp/i )) {
      $SecureAnon{$IP}++;
   } elsif (($IP,$User) = ($ThisLine =~ /\@(.*?)\)\s*\[info\]\s*(.*?) is now logged in/i )) {
      $Logins->{$IP}->{$User}++;
   } elsif (($j,$ConnectionCount,$IP) = ($ThisLine =~ /(.*?)too many connections \((.*?)\) from this ip\: \[(.*?)\]/i )) {
      $TooManyConnections->{$ConnectionCount}->{$IP}++;
   } elsif (($User,$Location,$File,$Direction) = ($ThisLine =~ /\((.*?)\@(.*?)\)\s+\[\w+\]\s+(.*?)\s+(\w+)\s+/)) {
      $Direction->{$User}->{$Location}->{$File}++;
   } elsif (($User,$Location,$File) = ($ThisLine =~ /\((.*?)\@(.*?)\)\s+\[\w+\]\s+ Deleted ([^ ]+)/)) {
      $Direction = "Deleted";
      $Direction->{$User}->{$Location}->{$File}++;
   } elsif ($ThisLine =~ m/pure-ftpd shutdown( |) succeeded/) {
      $PureShutdown++;
   } else {
      # Report any unmatched entries...
      push @OtherList,$ThisLine;
   }
}

##########################
#

if ($PureShutdown > 0) {
   print "\nPure-ftpd shutdown $PureShutdown Time(s)\n";
}

if ($ShowNewConnections) {
   if (keys %NewConnections) {
      print "\nNew Connections:\n";
      foreach $Line (sort {$a cmp $b} keys %NewConnections) {
         print "\t" . $Line . " - ". $NewConnections{$Line} . " Time(s)\n";
      }
   }
}

if ($ShowLogins) {
   if (keys %{$Logins}) {
      print "\nSuccessful Logins:\n";
      foreach $Line (sort {$a cmp $b} keys %{$Logins}) {
         foreach $Detail (sort {$a cmp $b} keys %{$Logins->{$Line}}) {
            print "\t" . $Detail. " (" . $Line . ") - ". $Logins->{$Line}->{$Detail} . " Time(s)\n";
         }
      }
   }
}

if (keys %{$TooManyConnections}) {
   print "\nToo Many Connections:\n";
   foreach $Line (sort {$a cmp $b} keys %{$TooManyConnections}) {
      foreach $Detail (sort {$a cmp $b} keys %{$TooManyConnections->{$Line}}) {
         print "\t" . $Detail. " (" . $Line . " connections) - ". $TooManyConnections->{$Line}->{$Detail} . " Time(s)\n";
      }
   }
}

if ($ShowDataTransfers) {
   if (keys %{$Direction}) {
      print "\nData Transferred:\n";
      foreach $User (sort {$a cmp $b} keys %{$Direction}) {
         foreach $Location (sort {$a cmp $b} keys %{$Direction->{$User}}) {
            foreach $Filename (sort {$a cmp $b} keys %{$Direction->{$User}->{$Location}}) {
               print "\tUser " . $User . " " . $Direction . " " . $Filename . " from " . $Location . " - ". $Direction->{$User}->{$Location}->{$Filename} . " Time(s)\n";
            }
         }
      }
   }
}

if (keys %SecureAnon) {
   print "\nUnsuccessful Secure Anonymous Connections:\n";
   foreach $Line (sort {$a cmp $b} keys %SecureAnon) {
      print "\t" . $Line . " - ". $SecureAnon{$Line} . " Time(s)\n";
   }
}

if ($ShowLogouts) {
   if (keys %Logouts) {
      print "\nLogouts:\n";
      foreach $Line (sort {$a cmp $b} keys %Logouts) {
         print "\t" . $Line . " - ". $Logouts{$Line} . " Time(s)\n";
      }
   }
}

if (($#OtherList >= 0) and (not $IngoreUnmatched)){
   print "\n**Unmatched Entries**\n";
   print @OtherList;
}

exit(0);

# vi: shiftwidth=3 tabstop=3 syntax=perl et

