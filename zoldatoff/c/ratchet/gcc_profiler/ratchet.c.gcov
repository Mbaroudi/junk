        -:    0:Source:ratchet.c
        -:    0:Graph:ratchet.gcno
        -:    0:Data:ratchet.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <math.h>
        -:    4:#include <time.h>
        -:    5:
        -:    6:#define sqr(x) ((x)*(x))
        -:    7:
        -:    8:#define p_0 0.0
        -:    9:#define x_0 1.0
        -:   10:#define sigma 1.0
        -:   11:#define V_0 1.0
        -:   12:#define Very_Big_Number 5.0e5
        -:   13:#define N_of_pixels 100
        -:   14:#define Max_F 2000.0
        -:   15:
        -:   16:double F[N_of_pixels];
        -:   17:double t = 0.10;
        -:   18:double kappa = 0.0;
        -:   19:double A[N_of_pixels], B, C;
        -:   20:
        -:   21:// _________We generate jumps__________________
        -:   22:void Generate_Jumps ()
  2000000:   23:{
  2000000:   24:        int f, k = 0;
  2000000:   25:        double Sum = t;
        -:   26:        double rnd, q, T[100];
  2000000:   27:        T[0] = t;
        -:   28:
        -:   29:        /*	for (k = 1; T[k] > 0.0; k++)
        -:   30:        	{
        -:   31:        		rnd = drand48();
        -:   32:        		if (rnd > 0.0)
        -:   33:        			T[k] = T[k-1] + log (rnd) / kappa;
        -:   34:        	}*/
        -:   35:
  7358909:   36:        while (Sum > 0.0) {
  3358909:   37:                rnd = drand48();
  3358909:   38:                if (rnd > 0.0)
  3358909:   39:                        Sum += log (rnd) / kappa;
  3358909:   40:                T[++k] = Sum;
        -:   41:        }
        -:   42:
  2000000:   43:        int N_of_jumps = k;
  2000000:   44:        T[N_of_jumps] = 0.0;
        -:   45:
202000000:   46:        for (f = 0; f < N_of_pixels; f++)
200000000:   47:                A[f] = 0.0;
  2000000:   48:        double A_tmp = 0.0;
  2000000:   49:        B = C  = 0.0;
        -:   50:
  5358909:   51:        for (k = 1; k <= N_of_jumps; k++) {
  3358909:   52:                rnd = kappa * drand48() / V_0;
  3358909:   53:                int j = 0;
  3358909:   54:                Sum = 0.0;
        -:   55:
 16612531:   56:                while (rnd > Sum)
  9894713:   57:                        Sum += 1.0 / (++j);
        -:   58:
  3358909:   59:                if (drand48() < 0.5) {
  1680446:   60:                        q = -j;
  1680446:   61:                        A_tmp = M_PI_2;
        -:   62:                } else {
  1678463:   63:                        q = j;
  1678463:   64:                        A_tmp = - M_PI_2;
        -:   65:                }
        -:   66:
  3358909:   67:                A_tmp -= sqr (q) * T[k] / 2 + M_PI_2 + q * T[k] * C;
339249809:   68:                for (f = 0; f < N_of_pixels; f++)
335890900:   69:                        A[f] += A_tmp - q * F[f] * sqr (T[k]) / 2;
  3358909:   70:                B += T[k] * q;
  3358909:   71:                C += q;
        -:   72:        }
  2000000:   73:}
        -:   74:
        -:   75://___________Calculating delta_p_________________________
        -:   76:void Calculate_delta_p ()
        1:   77:{
        -:   78:        int f, j;
        -:   79:        long k;
        -:   80:        double delta_p_Re[N_of_pixels], delta_p_Im[N_of_pixels];
        -:   81:        double A1[N_of_pixels], A2[N_of_pixels];
        -:   82:        double B1, B2, C1, C2;
        -:   83:        double tmp_sin, tmp_cos, tmp_exp, tmp1, tmp2;
        -:   84:        double Fi_Im, Fi_Re;
        -:   85:        double R_Im, R_Re;
        -:   86:        FILE *output, *crash;
        -:   87:
        1:   88:        output = fopen ("output.dat", "w");
        1:   89:        fclose(output);
        -:   90:
        3:   91:        for (j = 1; j <= 2; j++) {
        2:   92:                t += 0.1;
        -:   93:
      202:   94:                for (f = 0; f < N_of_pixels; f++)
      200:   95:                        delta_p_Re[f] = delta_p_Im[f] = 0.0;
  1000002:   96:                for (k = 1; k <= Very_Big_Number; k++) {
  1000000:   97:                        Generate_Jumps ();
101000000:   98:                        for (f = 0; f < N_of_pixels; f++)
100000000:   99:                                A1[f] = A[f];
  1000000:  100:                        B1 = B;
  1000000:  101:                        C1 = C;
  1000000:  102:                        Generate_Jumps ();
101000000:  103:                        for (f = 0; f < N_of_pixels; f++)
100000000:  104:                                A2[f] = A[f];
  1000000:  105:                        B2 = B;
  1000000:  106:                        C2 = C;
        -:  107:
  1000000:  108:                        tmp1 = 2.0 * (B1-B2) * sigma;
  1000000:  109:                        tmp2 = C1 + C2 - 2.0*p_0;
  1000000:  110:                        Fi_Re = - (sqr (tmp1) + sqr (C1 - C2)) / (8.0*sigma);
  1000000:  111:                        Fi_Im =  - (2.0 * tmp1 * tmp2 + 8.0 * x_0 * sigma * (C1 - C2)) / (8.0*sigma);
  1000000:  112:                        tmp_sin = sin (Fi_Im);
  1000000:  113:                        tmp_cos = cos (Fi_Im);
  1000000:  114:                        tmp_exp = exp (Fi_Re);
  1000000:  115:                        R_Re = - tmp_exp * (tmp_cos * tmp2 - tmp_sin * tmp1) / 2.0;
  1000000:  116:                        R_Im = - tmp_exp * (tmp_sin * tmp2 + tmp_cos * tmp1) / 2.0;
        -:  117:
101000000:  118:                        for (f = 0; f < N_of_pixels; f++) {
100000000:  119:                                tmp_sin = sin (A1[f]-A2[f]);
100000000:  120:                                tmp_cos = cos (A1[f]-A2[f]);
100000000:  121:                                delta_p_Re[f] += tmp_cos * R_Re - tmp_sin * R_Im;
100000000:  122:                                delta_p_Im[f] += tmp_sin * R_Re + tmp_cos * R_Im;
        -:  123:                        }
        -:  124:
        -:  125:                   /*     	crash = fopen ("crash", "w");
        -:  126:                        	fprintf (crash, "%f\n", k / Very_Big_Number);
        -:  127:                        	fclose (crash);
        -:  128:				printf("%f\%\n", 100 * k / Very_Big_Number);
        -:  129:		   */
        -:  130:                }
        -:  131:
      202:  132:                for (f = 0; f < N_of_pixels; f++) {
      200:  133:                        delta_p_Re[f] *= exp (2.0*kappa*t) / Very_Big_Number;
      200:  134:                        delta_p_Im[f] *= exp (2.0*kappa*t) / Very_Big_Number;
      200:  135:                        printf("F = %f\t", F[f]);
      200:  136:                        printf("delta_p_Re = %f\t", delta_p_Re[f]);
      200:  137:                        printf("delta_p_Im = %f\n", delta_p_Im[f]);
      200:  138:                        output = fopen ("output.dat", "a");
      200:  139:                        fprintf(output, "%f\t", F[f]);
      200:  140:                        fprintf(output, "%f\t", delta_p_Re[f]);
      200:  141:                        fprintf(output, "%f\n", delta_p_Im[f]);
      200:  142:                        fclose(output);
        -:  143:                }
        -:  144:        }
        -:  145:
        1:  146:        output = fopen ("output.dat", "a");
        1:  147:        fprintf(output, "\nx_0 = %f\n", 1.0*x_0);
        1:  148:        fprintf(output, "p_0 = %f\n", 1.0*p_0);
        1:  149:        fprintf(output, "V_0 = %f\n", 1.0*V_0);
        1:  150:        fprintf(output, "sigma = %f\n", 1.0*sigma);
        1:  151:        fprintf(output, "t = %f\n", 1.0*t);
        1:  152:        fclose(output);
        1:  153:}
        -:  154:
        -:  155:int main ()
        1:  156:{
        -:  157:        int k, f;
        -:  158:
        1:  159:        srand48 ((long) time(NULL));
        -:  160:
        9:  161:        for (k = 1; k <= 8; k++) {
        8:  162:                kappa += V_0/k;
        -:  163:        }
        -:  164:
      101:  165:        for (f = 0; f < N_of_pixels; f++) {
      100:  166:                F[f] = -Max_F + f * 2.0 * Max_F / N_of_pixels;
        -:  167:        }
        -:  168:
        1:  169:        printf("kappa = %f\n", kappa);
        1:  170:        Calculate_delta_p ();
        1:  171:        return 1;
        -:  172:}
        -:  173:
        -:  174:
        -:  175:
        -:  176:
