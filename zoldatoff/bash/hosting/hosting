#!/bin/bash

HOST_CONF_DIR="/etc/hosting"
HOST_ROOT_DIR="/var/www"

CONF_BACKUP_DIR=/var/backup/www/config
WEB_BACKUP_DIR=/var/backup/www/web
##Color support#######################################
#http://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x329.html

echo_error () {
	echo -e "\033[01;31m$1\033[1;30m"
}

echo_warning () {
	echo -e "\033[0;35m$1\033[1;30m"
}

echo_info () {
	echo -e "\033[01;34m$1\033[1;30m"
}

#######################################################
#######################################################

case $1 in
	### start the specified host.......
	start)	
		if [[ $2 == "" ]]; then
			echo_warning "* You must specify an ip address or 'all'"
			exit 1
		fi

		if [[ $2 == "all" ]]; then
			echo_info "Starting all hosts..."
			list=`ls -1 $HOST_CONF_DIR`
			for i in $list; do
				if [[ -d $HOST_CONF_DIR/$i &&  $i == 172.16.0.* ]]; then
					echo
					$0 start $i && continue
				fi
			done
			exit 0
		fi

		if [[ ! -d $HOST_CONF_DIR/$2 && $2 == 172.16.0.* ]]; then
			echo_warning "* The config dir for host $2 does not exist."
			echo_warning "* Please check the ip address you entered or run 'hosting add ...'"
			exit 1
		fi

		if [[ -f $HOST_CONF_DIR/$2/apache.pid ]]; then
			PID=`cat $HOST_CONF_DIR/$2/apache.pid`
			echo_warning "* Server $2 is already running on PID $PID"
			exit 1
		fi
		
		echo_info "Starting host $2"
		count=`echo $2 | awk --field-separator '.' '{print $4}'`
		ifconfig dummy$count $2 && \
		ifconfig dummy$count up 

		/usr/sbin/apache -D SSL -D PHP4 -D GZIP -f $HOST_CONF_DIR/$2/httpd.conf && sleep 7 && \
		PID=`cat $HOST_CONF_DIR/$2/apache.pid` && \
		echo_info "Host $2 started, process PID $PID" && exit 0

		echo_error "* Couldn't start apache on ip $2"
		echo_error "* Please check dummy$count interface and your config files in $HOST_CONF_DIR/$2"
		exit 1
		;;
########################################################
	### stop the specified host.......
	stop) 	
		if [[ $2 == "" ]]; then
                        echo_info "* You must specify an ip address or 'all'"
                        exit 2
                fi

                if [[ $2 == "all" ]]; then
                        echo_info "Stopping all hosts..."
			list=`ls -1 $HOST_CONF_DIR`
                        for i in $list; do
                                if [[ -d $HOST_CONF_DIR/$i && $i == 172.16.0.* ]]; then
					echo
					$0 stop $i && continue
                                fi
                        done
                        exit 0
                fi

                if [[ ! -d $HOST_CONF_DIR/$2 ]]; then
                        echo_warning "* Config dir for host $2 does not exist. Please check the ip address"
                        exit 2
                fi

                if [[ ! -f $HOST_CONF_DIR/$2/apache.pid ]]; then
                        echo_warning "* Server $2 has not been started yet"
                        exit 2
                fi

		PID=`cat $HOST_CONF_DIR/$2/apache.pid`
		kill $PID && echo_info "Host $2 stopped" && exit 0

		echo_error "* Couldn't stop apache on ip $2."
		echo_error "* Please stop apache process with PID $PID manually or remove file $HOST_CONF_DIR/$2/apache.pid"
		exit 2
		;;

########################################################
	### restart the specified host.......
	restart)
		$0 stop $2 && sleep 5 && $0 start $2
		;;

########################################################
	### add new host........
	add)
		if [[ $2 == "" ]]; then
			echo_info "* You must specify host name when adding a new host."
			exit 3
		fi
	
		HOST=$2
		IP=0
		for ((count=1; count<255; count++)); do
			if [[ `grep 172.16.0.$count /etc/hosting/hosts | wc | awk '{print $1}'` == 0 ]]; then
				IP=172.16.0.$count
				break
			fi
		done

		if [[ $IP == 0 ]]; then
			echo_error "* Couldn't find any free ip address for new host"
			exit 3		
		elif [[ -d $HOST_CONF_DIR/$IP ]]; then
			echo_error "* Config dir for an empty ip $IP already exists"
			echo_error "* Remove the directory $HOST_CONF_DIR/$IP or add a string '#$IP ...' to $HOST_CONF_DIR/hosts"
			exit 3
		fi

		USER=host$count

		echo_info "Adding host $IP named $HOST. It will belong to $USER:$USER"
		if [[ `grep $USER /etc/group | wc | awk '{print $1}'` > 0 ]]; then
			echo_warning "* Group $USER already exists. Remove it before continuing."
			exit 3
		fi

		if [[ `grep $USER /etc/passwd | wc | awk '{print $1}'` > 0 ]]; then
			echo_warning "* User $USER already exists. Remove him before continuing."
			exit 3
		fi

		echo_info "...Creating user and group '$USER'"
		groupadd $USER
		useradd -g $USER -G ftpusers,sshusers -c "WWW user" -d $HOST_ROOT_DIR/$IP $USER

		echo "...Building directory trees in $HOST_ROOT_DIR and $HOST_CONF_DIR"
		mkdir -p $HOST_ROOT_DIR/$IP/public_html/htdocs
		mkdir -p $HOST_ROOT_DIR/$IP/public_html/cgi-bin
		mkdir -p $HOST_ROOT_DIR/$IP/public_html/tmp
		mkdir -p $HOST_ROOT_DIR/$IP/logs
		mkdir -p $HOST_ROOT_DIR/$IP/my_files
		mkdir -p $HOST_CONF_DIR/$IP
		chown -R $USER:$USER $HOST_ROOT_DIR/$IP
		chmod -R 770 $HOST_ROOT_DIR/$IP
		chown -R $USER:$USER $HOST_CONF_DIR/$IP
		chmod -R 770 $HOST_CONF_DIR/$IP

		echo "...Making config files for new host"
		cp -R $HOST_CONF_DIR/default/* $HOST_CONF_DIR/$IP && chown -R $USER:$USER $HOST_CONF_DIR/$IP
		sed 's/$IP/'$IP'/' $HOST_CONF_DIR/default/httpd.conf | sed -e 's/$HOST/'$HOST'/' | \
			sed -e 's/$USER/'$USER'/' | sed -e 's/$GROUP/'$USER'/' > $HOST_CONF_DIR/$IP/httpd.conf
		sed 's/$IP/'$IP'/' $HOST_CONF_DIR/default/host.conf | sed -e 's/$HOST/'$HOST'/' | \
			sed -e 's/$USER/'$USER'/' | sed -e 's/$GROUP/'$USER'/' > $HOST_CONF_DIR/$IP/host.conf
		echo "$IP	$USER.webber.rubin.ru	$HOST	$3" >> $HOST_CONF_DIR/hosts

		echo "...Reconfiguring squid"
		/usr/sbin/squid -k reconfigure
		echo_info "Host added successfully. Please enter password for user $USER"
		passwd $USER
		exit 0
		;;
########################################################
	### show info on specified host
	remove)
		if [[ $2 == "" ]]; then
                        echo_info "* You must specify an ip address of the host"
                        exit 4
                fi

		if [[ ! -d $HOST_CONF_DIR/$2 ]]; then
                        echo_warning "* Such host does not exist. Please check the ip address"
                        exit 4
                fi

		echo_info "Removing host $2"
		if [[ -f $HOST_CONF_DIR/$2/apache.pid ]]; then
			$0 stop $2
			sleep 1
		fi
		

		count=`echo $2 | awk --field-separator '.' '{print $4}'`
		USER=host$count
		SITE=`grep $2 $HOST_CONF_DIR/hosts | awk '{print $3}'`
		userdel $USER && groupdel $USER && \
		echo "...User&group $USER were deleted" && \

		tar -czf $CONF_BACKUP_DIR/`date +%F_%H%M`_$SITE.tar.gz $HOST_CONF_DIR/$2 && \
		rm -r $HOST_CONF_DIR/$2 && \
		echo "...Config directory backupped" && \
		tar -czf $WEB_BACKUP_DIR/`date +%F_%H%M`_$SITE.tar.gz $HOST_ROOT_DIR/$2 && \
		rm -r $HOST_ROOT_DIR/$2 && \
		echo "...Web content backupped" && \

		cp $HOST_CONF_DIR/hosts $HOST_CONF_DIR/hosts.backup
		grep -v "$2" $HOST_CONF_DIR/hosts | grep -v "^$" > $HOST_CONF_DIR/hosts && \
		echo "...Hosts file succesfully edited" && \
		echo_info "Host $2 succesfully removed" && \
		/usr/sbin/squid -k reconfigure && \
		exit 0
		
		echo_error "* Couldn't remove host $2."
		echo_error "* Check if the user&group $USER were deleted"
		echo_error "* Delete directory $HOST_CONF_DIR/$2 manually and remove the host $2 from $HOST_CONF_DIR/hosts"
		exit 4
		;;
########################################################
	### uncomment specified host
	enable)
		if [[ $2 == "" ]]; then
                        echo_info "* You must specify an ip address"
                        exit 5
                fi
		
		if [[ `grep $2 $HOST_CONF_DIR/hosts | wc | awk '{print $1}'` == 0 ]]; then
			echo_warning "* Address $2 not found in $HOST_CONF_DIR/hosts"
			exit 5
		fi

		if [[ `grep $2 $HOST_CONF_DIR/hosts | wc | awk '{print $1}'` > 1 ]]; then
			echo_warning "* Address $2 was found more than once in $HOST_CONF_DIR/hosts"
			echo_warning "* You must manually edit $HOST_CONF_DIR/hosts to remove all duplications"
			exit 5
		fi
		
		if [[ `grep $2 $HOST_CONF_DIR/hosts | grep "^\s*#" | wc | awk '{print $1}'` == 1 ]]; then
			cat $HOST_CONF_DIR/hosts | grep -v $2 > $HOST_CONF_DIR/temp
			cat $HOST_CONF_DIR/hosts | grep $2 | awk --field-separator '#' '{print $2}' >> $HOST_CONF_DIR/temp
			cat $HOST_CONF_DIR/temp | grep -v "^$" > $HOST_CONF_DIR/hosts
			echo_info "Succesfully uncommented address $2 in $HOST_CONF_DIR/hosts"
		else
			echo_warning "* Address $2 is already uncommented in $HOST_CONF_DIR/hosts"
		fi

		rm -f $HOST_CONF_DIR/temp
		squid -k reconfigure
		echo
		echo "NB: Maybe you want to enable associated user using command:"
		echo "     $0 enable_user $2"
		exit 0
		;;
########################################################
	### comment specified host
	disable)
		if [[ $2 == "" ]]; then
                        echo_info "* You must specify an ip address"
                        exit 6
                fi
		
		if [[ `grep $2 $HOST_CONF_DIR/hosts | wc | awk '{print $1}'` == 0 ]]; then
                        echo_warning "* Address $2 not found in $HOST_CONF_DIR/hosts"
                        exit 6
                fi

                if [[ `grep $2 $HOST_CONF_DIR/hosts | wc | awk '{print $1}'` > 1 ]]; then
                        echo_warning "* Address $2 was found more than once in $HOST_CONF_DIR/hosts"
                        echo_warning "* You must manually edit $HOST_CONF_DIR/hosts to remove all duplications"
                        exit 6
                fi

		if [[ `grep $2 $HOST_CONF_DIR/hosts | grep -v "^\s*#" | wc | awk '{print $1}'` == 1 ]]; then
                        cat $HOST_CONF_DIR/hosts | grep -v $2 > $HOST_CONF_DIR/temp
                        echo "#`cat $HOST_CONF_DIR/hosts | grep $2`" >> $HOST_CONF_DIR/temp
                        cat $HOST_CONF_DIR/temp | grep -v "^$" > $HOST_CONF_DIR/hosts
                        echo_info "Succesfully commented address $2 in $HOST_CONF_DIR/hosts"
                else
                        echo_warning "* Address $2 is already commented in $HOST_CONF_DIR/hosts"
                fi

		rm -f $HOST_CONF_DIR/temp
		squid -k reconfigure
		echo
		echo "NB: Maybe you want to disable associated user using command:"
		echo "   $0 disable_user $2"
		exit 0
		;;
########################################################
	### show info on specified host
	show)
		if [[ $2 == "" ]]; then
                        echo_info "* You must specify an ip address or 'all'"
                        exit 7
                fi

                if [[ $2 == "all" ]]; then
                        echo_info "Showing info on all hosts..."
                        for ((i=1; i<255; i++)); do
				IP=172.16.0.$i
                                if [[ `grep $IP $HOST_CONF_DIR/hosts | wc | awk '{print $1}'` > 0 ]]; then
					echo
					$0 show $IP
				fi
                        done
                        exit 0
                fi

                if [[ ! -d $HOST_CONF_DIR/$2 ]]; then
                        echo_warning "* Config for host $2 does not exist. Please check the ip address"
                        exit 7
                fi
		
		echo_error "Info on host $2: "
		echo_warning "  Status:"
		if [[ -f $HOST_CONF_DIR/$2/apache.pid ]]; then 
			PID=`cat $HOST_CONF_DIR/$2/apache.pid`
			echo_info "     host is running, apache PID $PID"
		else
			echo_error "     !!! host is down"
		fi

		echo_warning "  Host aliases ('#' in the beginning of the line means that host is disabled):"
		echo_info "     `cat $HOST_CONF_DIR/hosts | grep $2`"

		echo_warning "  Owner user :  `cat $HOST_CONF_DIR/$2/httpd.conf | grep "User " | awk '{print $2}'`"
		echo_warning "  Owner group:  `cat $HOST_CONF_DIR/$2/httpd.conf | grep "Group " | awk '{print $2}'`"
		exit 0
		;;
########################################################
	### show info on specified host
	enable_user)
		if [[ $2 == "" ]]; then
                        echo_info "* You must specify an ip address"
                        exit 8
                fi
		
		USER=host`echo $2 | awk --field-separator '.' '{print $4}'`

		if [[ `grep $USER /etc/passwd | wc | awk '{print $1}'` > 0 ]]; then
			usermod -U $USER && echo_info "User $USER unlocked" && exit 0
			echo_error "Error unlocking user $USER" && exit 8
		else
			echo_warning "No such user $USER"
			exit 8
		fi
		;;

########################################################
        ### show info on specified host
        disable_user)
                if [[ $2 == "" ]]; then
                        echo_info "* You must specify an ip address"
                        exit 9
                fi

		USER=host`echo $2 | awk --field-separator '.' '{print $4}'`

                if [[ `grep $USER /etc/passwd | wc | awk '{print $1}'` > 0 ]]; then
			$0 stop $2
                        usermod -L $USER && echo_info "User $USER locked" && exit 0
                        echo_error "Error locking user $USER" && exit 9
                else
                        echo_warning "No such user $USER"
                        exit 9
                fi
                ;;

########################################################
	### show help screen...........
	*)
		echo_info "usage: $0"
		echo_info "(start|stop|restart|add|remove|enable|disable|enable_user|disable_user|show)"
		echo
                echo "start   <ip_address | all> - start apache on 'ip'-address or on all available addresses"
                echo "stop    <ip_address | all> - stop apache on 'ip'-address or on all available addresses"
                echo "restart <ip_address | all> - restart apache on 'ip'-address or on all available addresses"
		echo
                echo "add <hostname> [alias] - create user, group and a host, owned by them and named 'hostname'"
                #echo "addip <my.ip.ad.dr> <hostname> [alias] - add such a host on specified ip address"
		#echo
                echo "remove <ip_address> - remove user, group; remove the host from hosts file and from $HOST_CONF_DIR dir"
		echo
		echo "enable <ip_address> - enable specified ip in $HOST_CONF_DIR/hosts file"
		echo "disable <ip_address> - disable specified ip in $HOST_CONF_DIR/hosts file"
		echo
		echo "enable_user <user> - unlock specified user"
		echo "disable_user <user> - lock specified user"
		echo
                echo "show <ip_address | all> - show info on specified host or on all available hosts"
		exit 0
		;;
esac

