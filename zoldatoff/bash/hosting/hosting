#!/bin/bash

HOST_CONF_DIR="/etc/hosting"
HOST_ROOT_DIR="/var/www"

case $1 in
########################################################
	### start the specified host.......
	start)	
		if [[ $2 == "" ]]; then
			echo "* You must specify an ip address or 'all'"
			exit 0
		fi

		if [[ $2 == "all" ]]; then
			echo "Starting all hosts..."
			echo
			list=`ls -1 $HOST_CONF_DIR`
			for i in $list; do
				if [[ -d $HOST_CONF_DIR/$i &&  $i == 172.16.0.* ]]; then
					$0 start $i && echo && continue
                			# echo "* Couldn't start host $i"
				fi
			done
			exit 0
		fi

		if [[ ! -d $HOST_CONF_DIR/$2 && $2 == 172.16.0.* ]]; then
			echo "* The config dir for host $2 does not exist."
			echo "* Please check the ip address you entered or run 'hosting add ...'"
			exit 1
		fi

		if [[ -f $HOST_CONF_DIR/$2/apache.pid ]]; then
			PID=`cat $HOST_CONF_DIR/$2/apache.pid`
			echo "* Server $2 is already running on PID $PID"
			exit 1
		fi
		
		echo "Starting host $2"
		count=`echo $2 | awk --field-separator '.' '{print $4}'`
		ifconfig dummy$count $2 up && \
		/usr/sbin/apache -D SSL -D PHP4 -D GZIP -f $HOST_CONF_DIR/$2/httpd.conf && sleep 1 && \
		PID=`cat $HOST_CONF_DIR/$2/apache.pid` && \
		echo "Host $2 started, process PID $PID" && exit 0
		echo "* Couldn't start apache on ip $2"
		echo "* Please check dummy$count interface and your config files in $HOST_CONF_DIR/$2"
		exit 1
		;;
########################################################
	### stop the specified host.......
	stop) 	
		if [[ $2 == "" ]]; then
                        echo "* You must specify an ip address or 'all'"
                        exit 0
                fi

                if [[ $2 == "all" ]]; then
                        echo "Stopping all hosts..."
			echo
			list=`ls -1 $HOST_CONF_DIR`
                        for i in $list; do
                                if [[ -d $HOST_CONF_DIR/$i && $i == 172.16.0.* ]]; then
					$0 stop $i && echo && continue
                                        # echo "* Couldn't stop host $i"
                                fi
                        done
                        exit 0
                fi

                if [[ ! -d $HOST_CONF_DIR/$2 ]]; then
                        echo "* Config dir for host $2 does not exist. Please check the ip address"
                        exit 2
                fi

                if [[ ! -f $HOST_CONF_DIR/$2/apache.pid ]]; then
			echo $2
                        echo "* Server $2 has not been started yet"
                        exit 2
                fi

		PID=`cat $HOST_CONF_DIR/$2/apache.pid`
		kill $PID && echo "Host $2 stopped" && exit 0
		echo "* Couldn't stop apache on ip $2."
		echo "* Please stop apache process with PID $PID manually or remove file $HOST_CONF_DIR/$2/apache.pid"
		exit 2
		;;

########################################################
	### restart the specified host.......
	restart)
		$0 stop $2 && $0 start $2
		;;

########################################################
	### add new host........
	add)
		if [[ $4 == "" ]]; then
			echo "You must specify user name, group name and host name"
			exit 3
		fi
		USER=$2
		GROUP=$3
		HOST=$4

		#this is a part of script to check an empty ip by scanning /etc/hosts directory
		#IP=172.16.0.0
		#list=`ls -1 $HOST_CONF_DIR`
		#for i in $list; do
		#	if [[ -d $HOST_CONF_DIR/$i && $i == 172.16.0.* && $i > $IP ]]; then
		#		IP="$i"
		#	fi
		#done
		#count=`echo $IP | awk --field-separator '.' '{print $4}'`
		#count=$((count+1))
		#IP=172.16.0.$count

		#if [[ `cat $HOST_CONF_DIR/hosts | grep $IP | grep -v "^#"` != "" ]]; then
		#	echo "You must check your hosts file: it contains unused address $IP:"
		#	cat $HOST_CONF_DIR/hosts | grep $IP
		#	exit 3
		#fi
		#this is the end....

		IP=0
		for ((count=1; count<=254; count++)); do
			if [[ `grep 172.16.0.$count /etc/hosting/hosts | wc | awk '{print $1}'` == 0 ]]; then
				IP=172.16.0.$count
				break
			fi
		done

		if [[ $IP == 0 ]]; then
			echo "* Couldn't find any free ip address for new host"
			exit 3		
		elif [[ -d $HOST_CONF_DIR/$IP ]]; then
			echo "* Config dir for an empty ip $IP already exists"
			echo "* Remove the directory $HOST_CONF_DIR/$IP or add a string '#$IP ...' to $HOST_CONF_DIR/hosts"
			exit 3
		fi

		echo "Adding host $IP named $HOST. It belongs to $USER:$GROUP"
		echo "Building directory trees in $HOST_ROOT_DIR and $HOST_ROOT_DIR"
		mkdir -p $HOST_ROOT_DIR/$IP/public_html/htdocs
		mkdir -p $HOST_ROOT_DIR/$IP/public_html/cgi-bin
		mkdir -p $HOST_ROOT_DIR/$IP/public_html/tmp
		mkdir -p $HOST_ROOT_DIR/$IP/logs
		mkdir -p $HOST_ROOT_DIR/$IP/my_files
		mkdir -p $HOST_CONF_DIR/$IP/my_files
		chown -R $USER:$GROUP $HOST_ROOT_DIR/$IP

		echo "Making config files for new host"
		cp -R $HOST_CONF_DIR/default $HOST_CONF_DIR/$IP && chown -R $USER:$GROUP $HOST_CONF_DIR/$IP
		sed 's/$IP/'$IP'/' $HOST_CONF_DIR/default/httpd.conf | sed -e 's/$HOST/'$HOST'/' | \
			sed -e 's/$USER/'$USER'/' | sed -e 's/$GROUP/'$GROUP'/' > $HOST_CONF_DIR/$IP/httpd.conf
		sed 's/$IP/'$IP'/' $HOST_CONF_DIR/default/host.conf | sed -e 's/$HOST/'$HOST'/' | \
			sed -e 's/$USER/'$USER'/' | sed -e 's/$GROUP/'$GROUP'/' > $HOST_CONF_DIR/$IP/host.conf
		echo "$IP	host$count.webber.rubin.ru	$HOST" >> $HOST_CONF_DIR/hosts

		echo "Reconfiguring squid"
		/usr/sbin/squid -k reconfigure
		echo "Host added successfully"
		;;
########################################################
	### show info on specified host
	remove)
		if [[ $2 == "" ]]; then
                        echo "* You must specify an ip address of the host"
                        exit 4
                fi

		if [[ ! -d $HOST_CONF_DIR/$2 ]]; then
                        echo "* Such host does not exist. Please check the ip address"
                        exit 4
                fi

		echo "Removing host $2"
		if [[ -f $HOST_CONF_DIR/$2/apache.pid ]]; then
			$0 stop $2
		fi

		rm -rf $HOST_CONF_DIR/$2 && \ 
		cat $HOST_CONF_DIR/hosts | grep -v $2 > $HOST_CONF_DIR/hosts && \
		echo "Host $2 succesfully removed" && \
		exit 0
		
		echo "* Couldn't remove host."
		echo "* Please, delete directory $HOST_CONF_DIR/$2 manually and remove the host from $HOST_CONF_DIR/hosts"
		exit 4
		;;
########################################################
	### show info on specified host
	show)
		if [[ $2 == "" ]]; then
                        echo "* You must specify an ip address or 'all'"
                        exit 5
                fi

                if [[ $2 == "all" ]]; then
                        echo "Showing info on all hosts..."
			list=`ls -1 $HOST_CONF_DIR`
                        for i in $list; do
                                if [[ $i == *172.16.0.* ]]; then
					echo
					$0 show $i
				fi
                        done
                        exit 0
                fi

                if [[ ! -d $HOST_CONF_DIR/$2 ]]; then
                        echo "* Host $2 does not exist. Please check the ip address"
                        exit 5
                fi
		
		echo "-=<Info on host $2>=-"
		if [[ -d $HOST_CONF_DIR/$i && -f $HOST_CONF_DIR/$2/apache.pid ]]; then 
			PID=`cat $HOST_CONF_DIR/$2/apache.pid`
			echo "Host is running, apache PID $PID"
		else
			echo "Host is down"
		fi
		echo "Admin host name:"
		echo "   `cat $HOST_CONF_DIR/hosts | grep $2 | grep -v "^#" | awk '{print $2}'`"
		echo "DNS host names:"
		for name in `cat $HOST_CONF_DIR/hosts | grep $2 | grep -v "^#"`; do
			if [[ $name != 172.16.0.* && $name != host*.webber.rubin.ru ]]; then
				echo "  $name"
			fi
		done
		echo "Owner user :  `cat $HOST_CONF_DIR/$2/httpd.conf | grep "User " | awk '{print $2}'`"
		echo "Owner group:  `cat $HOST_CONF_DIR/$2/httpd.conf | grep "Group " | awk '{print $2}'`"
		exit 0
		;;

########################################################
	### show help screen...........
	*)	echo "===Hosting script usage==="
                echo "Start the host: 	hosting start <ip_address | all>"
                echo "Stop the host:  	hosting stop <ip_address | all>"
                echo "Restart the host: hosting restart <ip_address | all>"
                echo "Add new host:	hosting add <username> <groupname> <hostname>"
                echo "Delete host:	hosting remove <ip_address>"
                echo "Show host info:	hosting show <ip_address | all>"
		exit 0
		;;
esac

